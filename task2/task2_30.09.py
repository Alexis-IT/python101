import random
import string
from string import ascii_lowercase
from random import randint, choice   # Why need write this part? with import random - doesn't work

def generate_random_dict():
    ''' Generate dictionary with random number of pairs.
    
        Key: random lowercase latin letter
        Value: random integer number in range from 0 to 100
    '''

    numb_pairs = random.randint(1,26)             # As exist 26 letter, we can have from 1 to 26 keys in dict.
    
    # # Alternative way for generate list of dict   
    # key_values=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
    # inner_dict= { key_values[randint(0, 25)]: randint(0, 100) for i in range(numb_pairs)}
    
    inner_dict = {}

    while len(inner_dict) < numb_pairs:                                  # Generated keys for dict should be unique.
        inner_dict.update({choice(ascii_lowercase): randint(0, 100)})
    
    return inner_dict


def list_of_dict():
    '''Create list of dict. 
    
    Elements of list are generated by outer function generate_random_dict(). 
    '''
    
    n = random.randint(2,10)
    list_of_random_dict = [generate_random_dict() for i in range(n)]
    
    return list_of_random_dict


 # Part2
inner_list = [{'a': 5, 'b': 7, 'g': 11}, {'a': 3, 'c': 35, 'g': 42}] # Only for test

# def set_of_keys(some_dict):    
''' Generate set of keys form list of dict '''

#     set_keys = set()
#     for key in some_dict:       
#         set_keys.update(key)
#     return set_keys

# print(set_of_keys(inner_list))


def count_keys(some_dict_list):
    '''Return dictionary which count keys entry in dictionary from list

    Key: key from dictionary from list
    Value: count how much times key appears in different dictionaries from list.
    '''
    dict_key ={}
    for dict in some_dict_list:
        for key in dict:         
            if key in dict_key.keys():
                dict_key[key]=dict_key[key]+1
            else:
                dict_key[key] = 1
        
    return(dict_key)

print(count_keys(inner_list))


def max_keys(some_dict_list):
    '''Return dictionary which count max value of keys entry in dictionary from list

    Key: key from dictionary from list
    Value: max value of key
    '''
    dict_key_result_max ={}
    for dict in some_dict_list:
        for key, value in dict.items():            
            if key in dict_key_result_max.keys():
                dict_key_result_max[key] = max(dict_key_result_max[key], value)
            else:
                dict_key_result_max[key] = value
        
    return(dict_key_result_max)

print(max_keys(inner_list))



def index_max_keys(some_dict_list):
    '''Return dictionary which count index of max value of keys entry in dictionary from list

    Key: key from dictionary from list
    Value: index of max value of key
    '''
    dict_key_result_index ={}
    for dict in some_dict_list:
        for key, value in dict.items():
            if value == max_keys(some_dict_list)[key]:
                dict_key_result_index[key] = some_dict_list.index(dict) + 1  
        
    return(dict_key_result_index)

print(index_max_keys(inner_list))



def dict_key_info(some_dict_list):
    '''Return dictionary whith informatin about keys entry in dictionary from list

    Key: key from dictionary from list
    Value: list [count of key, max value for corespond key, in which dict (index of dict) exist max value for corespond key]
    '''
    dict_info ={}
    for dict in some_dict_list:
        for key in dict:
            dict_info[key]=[count_keys(some_dict_list)[key], max_keys(some_dict_list)[key],index_max_keys(some_dict_list)[key]]
    return dict_info

print(dict_key_info(inner_list))


def result_function():
    result_dict={}
    # here should add code by using dict_key_info()

    return result_dict




def run():
    generated_list_of_dict = list_of_dict()
    print(generated_list_of_dict, '\n')
    print('result:', result_function(generated_list_of_dict))

if __name__ == '__main__':
    run()